apply plugin: 'com.android.application'
apply plugin: "kotlin-android"
apply plugin: 'kotlin-android-extensions'


// The sample build uses multiple directories to
// keep boilerplate and common code separate from
// the main sample code.
List<String> dirs = [
        'main',     // main sample code; look here for the interesting stuff.
        'common',   // components that are reused by multiple samples
        'template'] // boilerplate code that is generated by the sample template process


task downloadEigen(type: Download) {
    src 'https://gitlab.com/libeigen/eigen/-/archive/3.3.7/eigen-3.3.7.zip'
    overwrite false
    dest new File(buildDir, 'eigen-3.3.7.zip')
}


task getEigen(dependsOn: downloadEigen, type: Copy) {
    from zipTree(downloadEigen.dest)
    into buildDir
}

preBuild.dependsOn(getEigen)


def getVersionTag = { variant ->

        def stdout1 = new ByteArrayOutputStream()
        exec {
            commandLine "git", "rev-list", "--tags", "--max-count=1"
            standardOutput = stdout1
        }
        def revlist = stdout1.toString().trim()
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine "git", "describe", "--tags", revlist
            standardOutput = stdout
        }
        def longTag = stdout.toString().trim()

        return longTag.substring(longTag.indexOf('v') + 1)
}

def getVersionCode = { tag ->
    def parts = tag.tokenize('.')
    if(parts.size() != 3 || parts[1].length() > 2 || parts[2].length() > 2) {
        throw new RuntimeException("Invalid version tag \"${tag}\", format \"x.y.z\" expected.")
    }
    return Integer.parseInt(parts[0])*1000000 + Integer.parseInt(parts[1])*1000 + Integer.parseInt(parts[2])
}

def getVersionName = { tag ->
    return tag
}


android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {

        minSdkVersion 28
        targetSdkVersion 29
        versionCode 9
        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your APK.
            abiFilters 'x86', 'arm64-v8a', 'armeabi-v7a'
        }
        // This block is different from the one you use to link Gradle
        // to your CMake or ndk-build script.
        externalNativeBuild {

            // For ndk-build, instead use the ndkBuild block.
            cmake {

                // Passes optional arguments to CMake.
                arguments "-DANDROID_ARM_NEON=TRUE", "-DANDROID_TOOLCHAIN=clang"

            }
        }


    }
    ndkVersion " 21.1.6352462"


    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def versionTag = getVersionTag(variant.buildType.name)
            print(versionTag + '\n')
            output.versionNameOverride = getVersionName(versionTag)
            output.outputFileName = "$applicationId-${output.baseName}-v${output.versionNameOverride}.apk"
            output.versionCodeOverride = getVersionCode(versionTag)
        }

    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            dirs.each { dir ->
                java.srcDirs "src/${dir}/java"
                res.srcDirs "src/${dir}/res"
            }
        }
        androidTest.setRoot('tests')
        androidTest.java.srcDirs = ['tests/src']

    }
    externalNativeBuild {
        cmake {
            path file('CMakeLists.txt')
        }
    }
    try{
    signingConfigs {

        release {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD

            // Optional, specify signing versions used
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
        debug {}
    }
    }
    catch (Throwable e){
        println "Could not get keys will not generate release build"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':opencv')
    implementation "com.squareup.okhttp3:okhttp:4.4.0"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.appcompat:appcompat:+'
    implementation "androidx.preference:preference:1.1.0"
//    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.1'
//    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.1'
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'com.github.tony19:logback-android:2.0.0'
    implementation 'com.google.android.material:material:+'
    implementation 'me.dm7.barcodescanner:zxing:1.9'
    implementation 'androidx.constraintlayout:constraintlayout:+'
    implementation 'androidx.navigation:navigation-fragment:+'
    implementation 'androidx.navigation:navigation-ui:+'
    implementation 'androidx.appcompat:appcompat:+'
    implementation 'androidx.constraintlayout:constraintlayout:+'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'com.google.android.gms:play-services-vision:11.0.4'
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    implementation 'com.google.code.gson:gson:2.8.6'
}

